[tool.pytest.ini_options]
pythonpath = "python/needle"
testpaths = "tests/"
addopts = [
    "-ra",
    "-n", "auto",
    "--strict-markers",
    "--strict-config",
    "-m not benchmark",
    "--import-mode=importlib",
]
markers = [
    "slow: marks tests as slow",
    "hypothesis: marks tests as property (hypothesis-based) tests",
    "gpu: marks tests as requiring a GPU",
    "datasets: marks tests as requiring datasets",
    "benchmark: marks tests as benchmark tests",
]

[tool.ruff]
target-version = "py312"
# fix = true

[tool.ruff.lint]
extend-select = ["UP", "E", "W", "F", "I", "SIM", "TID", "PTH", "PERF", "RUF"]
# extend-select = ["ALL"]
ignore = ["D", "ANN", "FIX", "TD", "COM", "ARG", "PLR", "NPY002", "N", "ERA001",
    "FBT001", # boolean args in functions
    "S311", # non-crypto random number generation
    "PGH003", # generic type hints ignore
    "RUF100" # unused no-qa: Remove after fixing
]
fixable = ["ALL"]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "S101", # asserts allowed in tests
    "EXE", # ignore shebangs
]

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.coverage.run]
branch = true
source = ["python/needle"]
omit = ["tests/*"]
parallel = true

[tool.coverage.report]
show_missing = true
# Fails tests if code coverage is below 80%
fail_under = 80

exclude_also = [
    'raise NotImplementedError',
    'if __name__ == .__main__.:',
    'if TYPE_CHECKING:',
    '@(abc\.)?abstractmethod',
]

[tool.coverage.xml]
# Save code coverage report
output = "reports/coverage.xml"
