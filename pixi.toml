[workspace]
authors = ["Jiří Liška <70215056+liskajiri@users.noreply.github.com>"]
description = "Library for deep learning & neural networks"
name = "needle"
platforms = ["linux-64"]
version = "0.1.0"
requires-pixi = ">=0.45.0" # introduced advanced tasks

channels = [
  # "https://prefix.dev/pixi-build-backends",
  "https://prefix.dev/conda-forge",
]
# preview = ["pixi-build"]

# [package.build]
# backend = { name = "pixi-build-python", version = "0.1.*" }

# [package.host-dependencies]
# hatchling = "==1.26.3"

[tasks]
clean = "rm -rf .build/ cmake-build-debug/ python/needle/backend_ndarray/ndarray_backend*.so .pytest_cache/ .coverage"
print_backend = { cmd = "echo Using backend=$NEEDLE_BACKEND" }
download_datasets ={ cmd = ["echo", "All datasets downloaded!"], depends-on = ["download_mnist", "download_tree_bank", "unpack_cifar"]}
see_updated_deps = "pixi update --no-install --json | pixi exec pixi-diff-to-markdown > diff.md"

[tasks.download_mnist]
args = [
  { "arg" = "save_dir", "default" = "data/mnist" },
  { "arg" = "download_path", "default" = "https://storage.googleapis.com/cvdf-datasets/mnist/" },
]
cmd = """
mkdir -p {{ save_dir }} &&
curl -o {{ save_dir }}/train-images-idx3-ubyte.gz {{ download_path }}train-images-idx3-ubyte.gz &&
curl -o {{ save_dir }}/train-labels-idx1-ubyte.gz {{ download_path }}train-labels-idx1-ubyte.gz &&
curl -o {{ save_dir }}/t10k-images-idx3-ubyte.gz {{ download_path }}t10k-images-idx3-ubyte.gz &&
curl -o {{ save_dir }}/t10k-labels-idx1-ubyte.gz {{ download_path }}t10k-labels-idx1-ubyte.gz
"""
outputs = ["data/mnist/train-images-idx3-ubyte.gz",
           "data/mnist/train-labels-idx1-ubyte.gz",
           "data/mnist/t10k-images-idx3-ubyte.gz",
           "data/mnist/t10k-labels-idx1-ubyte.gz"]

[tasks.download_tree_bank]
args = [
  { "arg" = "save_dir", "default" = "data/tree_bank" },
  { "arg" = "download_path", "default" = "\"https://raw.githubusercontent.com/wojzaremba/lstm/master/data/ptb.\"" },
]
cmd = """
mkdir -p {{ save_dir }} &&
curl -o {{ save_dir }}/train.txt {{ download_path }}train.txt &&
curl -o {{ save_dir }}/test.txt {{ download_path }}test.txt &&
curl -o {{ save_dir }}/valid.txt {{ download_path }}valid.txt
"""
outputs = ["data/tree_bank/test.txt", "data/tree_bank/train.txt",  "data/tree_bank/valid.txt"]

[tasks.download_cifar]
args = [
  { "arg" = "save_dir", "default" = "data/cifar-10" },
  { "arg" = "download_path", "default" = "\"https://www.cs.toronto.edu/~kriz/cifar-10-python.tar.gz\"" },
  { "arg" = "unpack_path", "default" = "data/cifar-10/cifar-10-python.tar.gz" },
]
cmd = "mkdir -p {{ save_dir }} && curl -o {{ unpack_path }}, {{ download_path }}"
outputs = ["data/cifar-10/cifar-10-python.tar.gz"]

[tasks.unpack_cifar]
args = [
  { "arg" = "save_dir", "default" = "data/cifar-10" },
  { "arg" = "unpack_path", "default" = "data/cifar-10/cifar-10-python.tar.gz" },
]
cmd = "tar -xvzf {{ unpack_path }} -C {{ save_dir }}"
inputs = ["data/cifar-10/cifar-10-python.tar.gz"]
outputs = ["data/cifar-10/cifar-10-batches-py/"]
depends-on = [{"task" = "download_cifar"}]

# TODO: gpu test/bench environment
[environments]
notebooks = ["notebooks"]
lint = {features = ["lint"], no-default-feature = true}
dev = ["dev"]
test = {features = ["test"], solve-group = "test"}
benchmark = {features = ["benchmark"], solve-group = "test"}

[dependencies]
numpy = ">=2.2.2,<3"
python = ">=3.12.8,<3.13"
# needle = { path = "."}
# ndarray_backend_cpu = { path = "backends/"}

[feature.notebooks.dependencies]
jupyter = ">=1.1.1,<2"
ipykernel = ">=6.29.5,<7"
marimo = ">=0.12.8,<0.13"
pytorch = ">=2.5.1,<3"

[feature.lint.dependencies]
pre-commit = ">=4.2.0,<5"
pre-commit-hooks = ">=5.0.0,<6"
pyright = ">=1.1.399,<2"

[feature.lint.tasks]
style = "pre-commit run --all-files --color=always --show-diff-on-failure"
type_check = "pyright"

[feature.dev.dependencies]
cmake = ">=4.0.1,<5"
ninja = ">=1.12.1,<2"
nanobind = ">=2.6.1,<3"
clang = ">=20.1.2,<21"
openmp = ">=8.0.1,<9"
clangxx = ">=20.1.2,<21"
libcxx = ">=20.1.2,<21"
libcxx-devel = ">=20.1.2,<21"
libcxxabi = ">=20.1.2,<21"
clang-tools = ">=20.1.2,<21"
tqdm = ">=4.67.1,<5"

[feature.dev.tasks]
# TODO: Move CMakelists to backends folder
make = { cmd = "cmake -G Ninja -S . -B .build"}
build = { cmd = ["ninja", "-C", ".build"], depends-on = ["make"] }

[feature.test.dependencies]
numdifftools = ">=0.9.41,<0.10"
pytest = ">=8.3.4,<9"
pytest-sugar = ">=1.0.0,<2"
pytest-cov = ">=6.0.0,<7"
pytest-xdist = ">=3.6.1,<4"
hypothesis = ">=6.124.0,<7"
pytest-randomly = ">=3.15.0,<4"
pytorch = ">=2.5.1,<3"


[feature.test.tasks]
test = {cmd = "pytest -n 8 -m 'not slow' -k 'not dataset'", depends-on = ["build", "print_backend"]}
test_datasets = {cmd = "pytest -n 4 tests/datasets", depends-on = ["build", "download_datasets"]}
test_doctests = {cmd = "pytest -n 0 --doctest-modules python/needle", depends-on = ["build", "print_backend"]}
test_hypothesis = {cmd = "pytest -n 8 -m 'hypothesis' --hypothesis-profile=dev", depends-on = ["build", "print_backend"]}
test_all = {cmd = """pytest -n auto
--junitxml=$TEST_REPORT_PATH.xml -o junit_family=legacy
--cov --cov-report=xml --cov-report=html --cov-context=test
""", depends-on = ["build", "print_backend", "download_datasets"]}
# low impact monitoring https://github.com/nedbat/coveragepy/issues/1746

# [feature.test.tasks.test]
# args = [
#   { "arg" = "n_threads", "default" = "8" },
#   { "arg" = "path", "default" = "''" },
#   { "arg" = "modules", "default" = "'not slow and not benchmark'" },
#   { "arg" = "names", "default" = "'not dataset'" },
#   { "arg" = "other", "default" = "''" },
# ]
# cmd = "pytest {{ path }} -n {{ n_threads }} -m {{ modules }} -k {{ names }} {{ other }}"
# depends-on = ["build", "print_backend"]

# [feature.test.tasks.test_datasets]
# depends-on = [{"task" = "test", "args" = ["4", "tests/datasets", "''", "'dataset'"]}]

# [feature.test.tasks.test_doctests]
# depends-on = [{"task" = "test", "args" = ["0", "python/needle", " ", " ", "--doctest-modules"]}]

# [feature.test.tasks.test_hypothesis]
# depends-on = [{"task" = "test", "args" = ["8", " ", "'hypothesis'", "''", "--hypothesis-profile=dev"]}]

# [feature.test.tasks.test_all]
# depends-on = [{"task" = "test", "args" = ["auto", " ", "''", "''",
# """
# --junitxml=$TEST_REPORT_PATH.xml -o junit_family=legacy
# --cov --cov-report=xml --cov-report=html
# --cov-context=test
# """
# ]}]


[feature.test.activation.env]
# Save results of test to html
TEST_REPORT_PATH = "reports/test_report"

# [feature.test.pypi-dependencies]
# pytest-testmon = ">=2.1.3, <3"

[feature.benchmark.dependencies]
pytest = ">=8.3.4,<9"
pytest-codspeed = ">=3.1.2,<4"
pytest-split = ">=0.10.0,<0.11"
# scalene = ">=1.5.41,<2"

[feature.benchmark.tasks]
benchmarks = {cmd = "pytest benchmarks/ --codspeed --codspeed-warmup-time=0 --codspeed-max-time=1", depends-on = ["build"]}
benchmark_matmul = {cmd = "pytest benchmarks/test_matmul.py --codspeed", depends-on = ["build"]}

# [feature.benchmark.pypi-dependencies]
# pytest-test-groups = ">=1.2.0, <2"

[activation.env]
PYTHONPATH = "./python:./apps:."
NEEDLE_BACKEND = "nd"
