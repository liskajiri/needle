name: CI

on:
  push:
    branches: [main]
  pull_request:

# Cancel in-progress runs on new commits
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  style:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      # Add pre-commit cache step
      - name: Cache pre-commit
        uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}
          restore-keys: pre-commit-

      - name: Lint
        uses: prefix-dev/setup-pixi@v0.8.1
        with:
          environments: lint
          cache: true
      - name: style
        run: pixi run style

  check-changed-files:
    permissions:
      contents: read

    runs-on: ubuntu-latest
    outputs:
      python_changed: ${{ steps.filter.outputs.python }}
      cpp_changed: ${{ steps.filter.outputs.cpp }}
      cuda_changed: ${{ steps.filter.outputs.cuda }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check for Python file changes
        id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            python:
              - '**/*.py'
            cpp:
              - '**/*.cpp'
            cuda:
              - '**/*.cu'

  # TODO: CUDA build
  build:
    needs: check-changed-files
    if: needs.check-changed-files.outputs.cpp_changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Test
        uses: prefix-dev/setup-pixi@v0.8.1
        with:
          pixi-version: v0.40.3
          cache: true
          cache-write:
            ${{ github.event_name == 'push' && github.ref_name == 'main' }}
      - run: pixi run build

  test:
    timeout-minutes: 10

    # test report needs write permissions
    permissions:
      contents: read
      issues: read
      checks: write
      pull-requests: write

    needs: check-changed-files
    if: >
        needs.check-changed-files.outputs.python_changed == 'true' ||
        needs.check-changed-files.outputs.cpp_changed == 'true' ||
        needs.check-changed-files.outputs.cuda_changed == 'true'
    strategy:
      matrix:
        backend: [nd, np]
      fail-fast: false

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Cache datasets
        uses: actions/cache@v4
        with:
          path: data
          key: ${{ runner.os }}-datasets-v1
          restore-keys: |
            ${{ runner.os }}-datasets-

      - name: Set backend
        run: echo "NEEDLE_BACKEND=${{ matrix.backend }}" >> "$GITHUB_ENV"
      - name: Test
        uses: prefix-dev/setup-pixi@v0.8.1
      - run: pixi run test_all

      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: matrix.backend == 'nd' && always()
        with:
          files: |
            reports/test_report.xml

      - name: Upload results to Codecov
        uses: codecov/codecov-action@v5
        if: matrix.backend == 'nd' && always()
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: liskajiri/needle
          files: reports/coverage.xml

      - name: Upload test results to Codecov
        if: matrix.backend == 'nd' && always()
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: reports/test_report.xml
